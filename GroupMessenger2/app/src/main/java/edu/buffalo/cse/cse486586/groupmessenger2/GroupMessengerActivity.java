package edu.buffalo.cse.cse486586.groupmessenger2;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/**
 * GroupMessengerActivity is the main Activity for the assignment.
 * 
 * @author stevko
 *
 */
public class GroupMessengerActivity extends Activity {

    private final String TAG = GroupMessengerActivity.class.getSimpleName();

    private final List<Integer> CLIENT_PORTS = Arrays.asList(11108, 11112, 11116, 11120, 11124);
    private final Integer SERVER_PORT = 10000;
    private final Integer SO_TIMEOUT = 500;    // milliseconds
    private final String DECISION_TAG = "decision";

    private Integer selfPId;
    private Integer selfClientPort;

    private Map<String, Float> receivedMsgStorage;    // stores the received msgs generated by other AVDs
    private Map<String, List<Float>> sentMsgsStorage;    // stores the msg generated by this AVD and the suggested sequence numbers by all AVDs in the pool

    private Map<Float, String> deliveryQueue;    // stores the msgs waiting to be delviered along with their decided seq numbers

    private Integer cur_msg_seq;
    private Integer msgCounter;

    private final Uri CONTENT_PROVIDER_URI = Uri.parse("content://edu.buffalo.cse.cse486586.groupmessenger2.provider");

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_group_messenger);

        /*
         * TODO: Use the TextView to display your messages. Though there is no grading component
         * on how you display the messages, if you implement it, it'll make your debugging easier.
         */
        TextView tv = (TextView) findViewById(R.id.textView1);
        tv.setMovementMethod(new ScrollingMovementMethod());

        /*
         * Calculate the port number that this AVD listens on.
         * It is just a hack that I came up with to get around the networking limitations of AVDs.
         * The explanation is provided in the PA1 spec.
         */
        TelephonyManager tel = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);
        String portStr = tel.getLine1Number().substring(tel.getLine1Number().length() - 4);
        selfClientPort = (Integer.parseInt(portStr) * 2);
        selfPId = (selfClientPort - 11108) / 4;

        /*
         * Registers OnPTestClickListener for "button1" in the layout, which is the "PTest" button.
         * OnPTestClickListener demonstrates how to access a ContentProvider.
         */
        findViewById(R.id.button1).setOnClickListener(
                new OnPTestClickListener(tv, getContentResolver()));

        // Initializing msg counters
        msgCounter = 0;
        cur_msg_seq = 0;

        receivedMsgStorage = new HashMap<String, Float>();
        sentMsgsStorage = new HashMap<String, List<Float>>();
        deliveryQueue = new TreeMap<Float, String>();

        try{
            ServerSocket serverSocket = new ServerSocket(SERVER_PORT);
            new ServerTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, serverSocket);
        }
        catch(IOException ioe){
            Log.e(TAG, "Error occurred while creating a server socket");
            Log.e(TAG, ioe.getMessage());

        }

        /*
         * TODO: You need to register and implement an OnClickListener for the "Send" button.
         * In your implementation you need to get the message from the input box (EditText)
         * and send it to other AVDs.
         */

        Button button = (Button) findViewById(R.id.button4);
        button.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        EditText editText = (EditText) findViewById(R.id.editText1);
                        String msgToSend = editText.getText().toString();
                        editText.setText("");

                        synchronized (cur_msg_seq){
                            sentMsgsStorage.put(msgToSend, null);
                            msgToSend += ":" + (cur_msg_seq++) + "." +selfPId;
                        }

                        sendMessage(msgToSend);
                    }
                }
        );
    }

    public void sendMessage(String msgToSend){
        new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, msgToSend);
    }

    public void sendMessageWithAdditionalParam(String msgToSend, String additionalParam){
        new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, msgToSend, additionalParam);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.activity_group_messenger, menu);
        return true;
    }

    private class ServerTask extends AsyncTask<ServerSocket, String, Void>{

        @Override
        protected Void doInBackground(ServerSocket... serverSockets) {
            ServerSocket serverSocket = serverSockets[0];

            while(true){
                Socket socket = null;
                BufferedReader br = null;
                PrintWriter pw = null;

                try{
                    socket = serverSocket.accept();

                    br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    String inputMsg = br.readLine();

                    if(inputMsg != null){
                        Log.d(TAG, "Server : Input msg received : " + inputMsg);
                        pw = new PrintWriter(socket.getOutputStream(), true);
                        pw.println(inputMsg);

                        String receivedMsg = inputMsg.substring(0,inputMsg.lastIndexOf(":"));
                        Float receivedMsgSeq = Float.parseFloat(inputMsg.substring(inputMsg.lastIndexOf(":") + 1));

                        if(sentMsgsStorage.keySet().contains(receivedMsg)){
                            // the msg was sent by this AVD
                            processOwnMsg(receivedMsg, receivedMsgSeq);
                        }
                        else{
                            // msg not generated by this AVD
                            if(receivedMsgStorage.keySet().contains(receivedMsg)){
                                // decided sequence number for remote client's msg received
                                receivedMsgStorage.remove(receivedMsg);
                                deliveryQueue.put(receivedMsgSeq, receivedMsg);
                            }
                            else{
                                // Msg from a remote client received first time
                                // need to suggest a possible sequence number
                                synchronized (cur_msg_seq){
                                    String msgToSend = receivedMsg + ":" + (cur_msg_seq++) + "." +selfPId;
                                    sendMessageWithAdditionalParam(msgToSend, socket.getPort()+"");
                                }
                            }
                        }
                    }
                }
                catch(IOException ioe){
                    Log.e(TAG, "Exception encountered during socket operations");
                    Log.e(TAG, ioe.getMessage());
                }
                catch(Exception e){
                    Log.e(TAG, "General exception in ServerTask");
                    Log.e(TAG, e.getMessage());
                }
                finally{
                    try{
                        if(br != null)
                            br.close();
                        if(pw != null)
                            pw.close();
                        if(socket != null)
                            socket.close();
                    }
                    catch(Exception e){
                        Log.e(TAG,"Server : Exception encountered while closing streams or socket");
                        Log.e(TAG, e.getMessage());
                        e.printStackTrace();
                    }
                }
            }
        }

        @Override
        protected void onProgressUpdate(String ...receivedMsgs){
            String receivedMsg = receivedMsgs[0].trim();
            TextView tv = (TextView) findViewById(R.id.textView1);
            tv.append(receivedMsg + "\n\n");

            //saving to database
            ContentValues contentToInsert = new ContentValues();
            contentToInsert.put("key", msgCounter++);
            contentToInsert.put("value", receivedMsg);
            Uri uri = getContentResolver().insert(CONTENT_PROVIDER_URI, contentToInsert);
        }

        public void processOwnMsg(String receivedMsg, Float receivedMsgSeq){
            List<Float> msgSeqNums = sentMsgsStorage.get(receivedMsg);
            if(msgSeqNums == null)
            {
                msgSeqNums = new ArrayList<Float>();
                msgSeqNums.add(receivedMsgSeq);
                sentMsgsStorage.put(receivedMsg, msgSeqNums);
            }
            else{
                // checked if the input msg was duplicated by network in transit
                if(!msgSeqNums.contains(receivedMsgSeq))
                    msgSeqNums.add(receivedMsgSeq);
            }

            if(msgSeqNums.size() == CLIENT_PORTS.size()){
                // all AVDs suggested a possible sequence number for the msg generated by this AVD
                // time to decide the final sequence number and inform others in the network
                Float finalMsgSeqNum = findMax(msgSeqNums);

                sentMsgsStorage.remove(receivedMsg);
                deliveryQueue.put(finalMsgSeqNum, receivedMsg);

                String msgToSend = receivedMsg + ":" + finalMsgSeqNum;
                sendMessageWithAdditionalParam(msgToSend, DECISION_TAG);

                checkForMsgDelivery();
            }
        }

        public void checkForMsgDelivery(){

            for(Map.Entry<Float, String> entry : deliveryQueue.entrySet())    // TreeMap.entrySet() returns keys in sorted order
            {
                if(isKeySmallerThanPendingDecisions(entry.getKey())){
                    publishProgress(entry.getValue());
                }
                else{
                    // need to wait until all decisions having smaller seq number than current key are resolved
                    break;
                }
            }
        }

        public boolean isKeySmallerThanPendingDecisions(Float key){
            List<Float> pendingDecisions = (ArrayList)receivedMsgStorage.values();
            for(Float pendingDecision : pendingDecisions){
                if(pendingDecision < key)
                    return false;
            }

            return true;
        }
    }    //ServerTask

    private class ClientTask extends AsyncTask<String, Void, Void>{

        @Override
        protected Void doInBackground(String... msgs) {
            String msgToSend = msgs[0];

            List<Integer> remoteList = null;

            if(msgs.length == 2){
                if(msgs[1].equals(DECISION_TAG)) {
                    remoteList = new ArrayList<Integer>();
                    remoteList.addAll(CLIENT_PORTS);
                    remoteList.remove(Integer.valueOf(selfClientPort));
                }
                else {
                    // response to an AVD with suggested sequence number
                    remoteList = new ArrayList<Integer>();
                    remoteList.add(Integer.parseInt(msgs[1]));
                }
            }
            else{
                // send msg to all AVDs
                remoteList = CLIENT_PORTS;
            }

            Socket socket = null;
            PrintWriter pw = null;
            BufferedReader br= null;

            for(Integer remotePort : remoteList){
                try{
                    socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}), remotePort);
                    socket.setSoTimeout(SO_TIMEOUT);

                    pw = new PrintWriter(socket.getOutputStream(), true);
                    br = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                    pw.println(msgToSend);
                    Log.d(TAG, "Client: Msg Sent - " + msgToSend);

                    while(true){
                        if(br.readLine().equals(msgToSend))
                            break;
                    }
                }
                catch(UnknownHostException uhe){
                    Log.e(TAG, "Error encountered while connecting to remote socket");
                    Log.e(TAG, uhe.getMessage());
                }
                catch (SocketTimeoutException ste){
                    Log.e(TAG, "Socket timeout occurred at remote port - " + remotePort);
                    Log.i(TAG, "Excluding device at port " + remotePort + " from recipient list" );
                    CLIENT_PORTS.remove(remotePort);
                    Log.e(TAG, ste.getMessage());
                }
                catch (IOException ioe){
                    Log.e(TAG, "Exception encountered while creating a socket");
                    Log.e(TAG, ioe.getMessage());
                }
                catch(Exception e){
                    Log.e(TAG, "General exception in ClientTask");
                    Log.e(TAG, e.getMessage());
                }
                finally{
                    try{
                        if(pw != null)
                            pw.close();
                        if(br != null)
                            br.close();
                        if(socket != null)
                            socket.close();
                    }
                    catch (IOException ioe){
                        Log.e(TAG, "Client : Exception thrown while closing streams and socket");
                        Log.e(TAG, ioe.getMessage());
                        ioe.printStackTrace();
                    }
                }
            }
            return null;
        }
    }

    public Float findMax(List<Float> msgSeqNums){
        Float max = -1.0f;
        for(Float seq : msgSeqNums) {
            if (max < seq)
                max = seq;
        }
        return max;
    }
}    //GroupMessengerActivity
